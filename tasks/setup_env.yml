---
# additional setup and fixes for OS dependent environment
- name: "[ENV] controls nextcloud_trusted_domain type"
  ansible.builtin.fail:
    msg: "New versions require nextcloud_trusted_domain to be declared as a list."
  when: nextcloud_trusted_domain is string

- name: "[ENV] remember custom php version"
  ansible.builtin.set_fact:
    php_ver_custom: "{{ php_ver }}"
  when: php_ver is defined

- name: "[ENV] include OS static vars"
  ansible.builtin.include_vars: '{{ item }}'
  loop:
    - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
    - '{{ ansible_os_family }}.yml'

- name: "[ENV] Overwrite OS php_ver with custom php version if defined"
  ansible.builtin.set_fact:
    php_ver: "{{ php_ver_custom }}"
  when: php_ver_custom is defined

- name: "[ENV] - ca-certificate are up to date"
  # needed for downloading from download.nextcloud.com as the site use letsencrypt certificates
  # letsencrypt may not be trusted on older OS
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 86400
  loop:
    - acl
    - ca-certificates
  when: ansible_os_family in [ "Debian" ]

- name: "[ENV] - Load PHP environment from OS specific variable"
  ansible.builtin.include_vars: "../defaults/php{{ php_ver }}_env.yml"

  # fix for debian not using sudo :
  # finding out if sudo is installed or not
- name: "[ENV] - Debian only : checking sudo."
  ansible.builtin.command: "dpkg -l sudo"
  changed_when: false
  register: nc_sudo_installed_result
  failed_when: false
  when: ansible_distribution == "Debian"

- name: "[ENV] - Checking su"
  block:
    - name: "[ENV] - rolling back to su."
      ansible.builtin.set_fact:
        ansible_become_method: "su"
    - name: "[ENV] - force su to use /bin/sh as shell"
      ansible.builtin.set_fact:
        ansible_become_flags: '-s /bin/sh'
  when:
    - nc_sudo_installed_result.rc is defined
    - nc_sudo_installed_result.rc != 0

- name: "[ENV] - Generate database user password."
  ansible.builtin.set_fact:
    nextcloud_db_pwd: "{{ lookup( 'ansible.builtin.password', 'nextcloud_instances/'+ nextcloud_instance_name +'/db_admin.pwd' ) }}"
  when: nextcloud_db_pwd is not defined

- name: "[ENV] - MySql / Maria vars"
  block:
    - name: "[ENV] - Define mysql daemon."
      ansible.builtin.set_fact:
        mysql_daemon: "{{ __mysql_daemon }}"
      when: mysql_daemon is not defined

    - name: "[ENV] - Generate database root password."
      ansible.builtin.set_fact:
        nextcloud_mysql_root_pwd: "{{ lookup( 'ansible.builtin.password', 'nextcloud_instances/'+ nextcloud_instance_name +'/db_root.pwd' ) }}"
      when: nextcloud_mysql_root_pwd is not defined
  when: nextcloud_db_backend in ["mysql", "mariadb"]
